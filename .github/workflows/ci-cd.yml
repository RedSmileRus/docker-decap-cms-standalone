name: Secure DevSecOps Pipeline for Decap CMS (Yandex Cloud)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # ---------- SAST ----------
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_COMMAND: "detect --redact --verbose --exit-code=2 --report-format=sarif --report-path=./results.sarif --log-level=debug"
        continue-on-error: true

      - name: Extract Gitleaks SARIF
        run: |
          if [ -f ./results.sarif ]; then
            mv ./results.sarif ./gitleaks-results.sarif
          else
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"gitleaks","informationUri":"https://github.com/gitleaks/gitleaks"}},"results":[]}]}'> ./gitleaks-results.sarif
          fi

      - name: Set up Python (for Semgrep CLI)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Semgrep CLI
        run: pip install --upgrade semgrep

      - name: Run Semgrep (SARIF)
        run: |
          semgrep scan --config auto --sarif-output=semgrep.sarif || true
          [ -f semgrep.sarif ] || echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"semgrep","informationUri":"https://semgrep.dev"}},"results":[]}]}'> semgrep.sarif

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install || echo "No package.json or lock file, skipping install"
        continue-on-error: true

      - name: Run npm audit
        run: npm audit --audit-level=high --json > sast-npm-audit.json 2>/dev/null || echo '{"metadata":{"vulnerabilities":{"info":0,"low":0,"moderate":0,"high":0,"critical":0}},"vulnerabilities":[]}' > sast-npm-audit.json
        continue-on-error: true

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            ./gitleaks-results.sarif
            ./semgrep.sarif
            ./sast-npm-audit.json
        if: always()

  # ---------- Build & Push ----------
  build:
    runs-on: ubuntu-latest
    needs: sast
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Install YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          sudo install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc

      - name: Configure YC
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"

      - name: Docker login (push)
        run: |
          TOKEN=$(yc iam create-token)
          echo "$TOKEN" | docker login -u iam --password-stdin cr.yandex

      - name: Build & Push
        id: build
        run: |
          IMAGE="${{ secrets.YC_REGISTRY_REPO }}"
          TAG="${{ github.sha }}"
          docker build \
            --build-arg DECAP_CMS_VER=3.0.9 \
            --build-arg NETLIFY_CMS_AUTH_HASH='${{ secrets.NETLIFY_CMS_AUTH_HASH }}' \
            --build-arg OAUTH_CLIENT_ID='${{ secrets.OAUTH_CLIENT_ID }}' \
            --build-arg OAUTH_CLIENT_SECRET='${{ secrets.OAUTH_CLIENT_SECRET }}' \
            --build-arg ORIGINS='${{ secrets.ORIGINS }}' \
            -t "$IMAGE:$TAG" -t "$IMAGE:latest" .
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  # ---------- Deploy: Staging ----------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install YC CLI (runner)
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          sudo install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc

      - name: Configure YC (runner)
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"

      - name: Create IAM token (runner)
        run: echo "YC_IAM_TOKEN=$(yc iam create-token)" >> $GITHUB_ENV

      - name: Deploy to Staging VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          envs: YC_IAM_TOKEN
          script: |
            set -euo pipefail
            echo "$YC_IAM_TOKEN" | docker login -u iam --password-stdin cr.yandex

            mkdir -p ~/decap-staging

            # открыть порты
            sudo ufw allow 80 || true
            sudo ufw allow 8080 || true

            IMAGE="${{ secrets.YC_REGISTRY_REPO }}:${{ needs.build.outputs.image_tag }}"

            # container.env: только хосты в ORIGINS (без схем/портов)
            cat > ~/decap-staging/container.env <<ENV
            PORT=80
            HOST=0.0.0.0
            ORIGINS=${{ secrets.ORIGINS }}
            ENV
            # на случай CRLF из Git
            sed -i 's/\r$//' ~/decap-staging/container.env

            # docker-compose.yml — публикуем 80 (UI) и 8080 (OAuth)
            cat > ~/decap-staging/docker-compose.yml <<YML
            services:
              cms:
                image: ${IMAGE}
                ports:
                  - "80:80"
                  - "8080:8080"
                restart: unless-stopped
                env_file:
                  - ./container.env
                volumes:
                  - ./config.yml:/app/config.yml:ro
                  - ./container.env:/app/.env:ro
            YML

            # config.yml — base_url указывает на OAuth-порт 8080
            cat > ~/decap-staging/config.yml <<CFG
            backend:
              name: github
              repo: user/example-blog
              branch: master
              base_url: http://${{ secrets.STAGING_VM_HOST }}:8080
              commit_messages:
                create: "Create {{collection}} “{{slug}}”"
                update: "Update {{collection}} “{{slug}}”"
                delete: "Delete {{collection}} “{{slug}}”"
                uploadMedia: "Upload “{{path}}”"
                deleteMedia: "Delete “{{path}}”"
            media_folder: /static/media/uploads
            public_folder: /media/uploads
            collections:
              - label: "Posts"
                label_singular: "Post"
                name: posts
                folder: posts
                media_folder: "/static/media/blog"
                public_folder: "../../../static/media/blog"
                slug: "{{fields.slug}}"
                path: "{{year}}/{{month}}/{{slug}}"
                create: true
                view_filters:
                  - label: Drafts
                    field: draft
                    pattern: true
                fields:
                  - { label: "Template Key", name: templateKey, widget: hidden, default: "blog-post" }
                  - { label: "Slug", name: slug, widget: string, pattern: ["^[a-z0-9]+(?:-[a-z0-9]+)*$", "A slug can have no spaces or special characters"] }
                  - { label: "Cover Image", name: cover, widget: image }
                  - { label: "Title", name: title, widget: string }
                  - { label: "Publish Date", name: date, widget: datetime }
                  - { label: "Description", name: description, widget: text }
                  - { label: "Draft", name: draft, widget: boolean, default: false }
                  - { label: "Tags", name: tags, widget: list }
                  - { label: "Body", name: body, widget: markdown }
            CFG

            docker compose -f ~/decap-staging/docker-compose.yml pull
            docker compose -f ~/decap-staging/docker-compose.yml up -d

            # POSIX-ожидание запуска
            i=1; while [ $i -le 30 ]; do
              if docker ps --filter "name=decap-staging-cms-1" --filter "status=running" | grep -q decap-staging-cms-1; then
                echo "Container is running"
                break
              fi
              echo "Waiting for container to start... ($i/30)"; i=$((i+1)); sleep 2
            done

            # Health: корень UI
            curl -fsSL http://localhost/ >/dev/null || (echo "Local GET / failed" && exit 1)
            # (необязательно) проверить доступность OAuth-порта
            curl -fsSI http://localhost:8080/ >/dev/null || echo "OAuth port not answering HEAD (may be fine)"

            docker ps
            docker logs --tail=200 decap-staging-cms-1 || true

      - name: Health check (public)
        run: curl -fsSI --max-time 30 "http://${{ secrets.STAGING_VM_HOST }}/" >/dev/null

  # ---------- DAST ----------
  dast:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: http://${{ secrets.STAGING_VM_HOST }}/
          cmd_options: '-a -m 10 -f json -o dast-report.json -r dast-report.html'
        continue-on-error: true

      - name: Upload DAST reports
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            dast-report.json
            dast-report.html
        if: always()

  # ---------- Image Scan ----------
  image-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          sudo install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc

      - name: Configure YC
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"

      - name: Docker login
        run: |
          TOKEN=$(yc iam create-token)
          echo "$TOKEN" | docker login -u iam --password-stdin cr.yandex

      - name: Pull image for scanning
        run: docker pull ${{ secrets.YC_REGISTRY_REPO }}:${{ needs.build.outputs.image_tag }}

      - name: Trivy image scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ secrets.YC_REGISTRY_REPO }}:${{ needs.build.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-image.sarif'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
        if: always()

  # ---------- Security Gateway ----------
  security-gateway:
    runs-on: ubuntu-latest
    needs: [sast, dast, image-scan]
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Guard missing files
        run: |
          mkdir -p sast-reports dast-reports image-scan-reports
          : > sast-reports/gitleaks-results.sarif
          : > sast-reports/semgrep.sarif
          : > sast-reports/sast-npm-audit.json
          : > dast-reports/dast-report.json
          : > image-scan-reports/trivy-image.sarif

      - name: Check for critical vulnerabilities
        run: |
          if jq '.runs[0].results | length > 0' sast-reports/gitleaks-results.sarif | grep -q '^[1-9]'; then exit 1; fi
          if jq '.runs[].results[]? | select(.level=="error")' sast-reports/semgrep.sarif | grep -q .; then exit 1; fi
          if [ -s sast-reports/sast-npm-audit.json ]; then
            if jq -e '.metadata.vulnerabilities.high > 0 or .metadata.vulnerabilities.critical > 0' sast-reports/sast-npm-audit.json; then exit 1; fi
          fi
          if [ -s dast-reports/dast-report.json ]; then
            if jq '.site[]?.alerts[]? | select((.riskcode|tonumber) > 2)' dast-reports/dast-report.json | grep -q .; then exit 1; fi
          fi
          if [ -s image-scan-reports/trivy-image.sarif ]; then
            if jq '.runs[].results[]? | select(.level=="error")' image-scan-reports/trivy-image.sarif | grep -q .; then exit 1; fi
          fi

  # ---------- Deploy: Prod ----------
  deploy-prod:
    runs-on: ubuntu-latest
    needs: security-gateway
    if: needs.security-gateway.result == 'success'
    steps:
      - name: Install YC CLI (runner)
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          sudo install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc

      - name: Configure YC (runner)
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"

      - name: Create IAM token (runner)
        run: echo "YC_IAM_TOKEN=$(yc iam create-token)" >> $GITHUB_ENV

      - name: Deploy to Prod VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          envs: YC_IAM_TOKEN
          script: |
            set -euo pipefail
            echo "$YC_IAM_TOKEN" | docker login -u iam --password-stdin cr.yandex

            mkdir -p ~/decap-prod

            sudo ufw allow 80 || true
            sudo ufw allow 8080 || true

            IMAGE="${{ secrets.YC_REGISTRY_REPO }}:${{ needs.build.outputs.image_tag }}"

            cat > ~/decap-prod/container.env <<ENV
            PORT=80
            HOST=0.0.0.0
            ORIGINS=${{ secrets.ORIGINS }}
            ENV
            sed -i 's/\r$//' ~/decap-prod/container.env

            cat > ~/decap-prod/docker-compose.yml <<YML
            services:
              cms:
                image: ${IMAGE}
                ports:
                  - "80:80"
                  - "8080:8080"
                restart: unless-stopped
                env_file:
                  - ./container.env
                volumes:
                  - ./config.yml:/app/config.yml:ro
                  - ./container.env:/app/.env:ro
            YML

            cat > ~/decap-prod/config.yml <<CFG
            backend:
              name: github
              repo: user/example-blog
              branch: master
              base_url: http://${{ secrets.VM_HOST }}:8080
              commit_messages:
                create: "Create {{collection}} “{{slug}}”"
                update: "Update {{collection}} “{{slug}}”"
                delete: "Delete {{collection}} “{{slug}}”"
                uploadMedia: "Upload “{{path}}”"
                deleteMedia: "Delete “{{path}}”"
            media_folder: /static/media/uploads
            public_folder: /media/uploads
            collections:
              - label: "Posts"
                label_singular: "Post"
                name: posts
                folder: posts
                media_folder: "/static/media/blog"
                public_folder: "../../../static/media/blog"
                slug: "{{fields.slug}}"
                path: "{{year}}/{{month}}/{{slug}}"
                create: true
                view_filters:
                  - label: Drafts
                    field: draft
                    pattern: true
                fields:
                  - { label: "Template Key", name: templateKey, widget: hidden, default: "blog-post" }
                  - { label: "Slug", name: slug, widget: string, pattern: ["^[a-z0-9]+(?:-[a-z0-9]+)*$", "A slug can have no spaces or special characters"] }
                  - { label: "Cover Image", name: cover, widget: image }
                  - { label: "Title", name: title, widget: string }
                  - { label: "Publish Date", name: date, widget: datetime }
                  - { label: "Description", name: description, widget: text }
                  - { label: "Draft", name: draft, widget: boolean, default: false }
                  - { label: "Tags", name: tags, widget: list }
                  - { label: "Body", name: body, widget: markdown }
            CFG

            docker compose -f ~/decap-prod/docker-compose.yml pull
            docker compose -f ~/decap-prod/docker-compose.yml up -d

            i=1; while [ $i -le 30 ]; do
              if docker ps --filter "name=decap-prod-cms-1" --filter "status=running" | grep -q decap-prod-cms-1; then
                echo "Container is running"
                break
              fi
              echo "Waiting for container to start... ($i/30)"; i=$((i+1)); sleep 2
            done

            curl -fsSI http://localhost/ >/dev/null || (echo "Local GET / failed" && exit 1)
            curl -fsSI http://localhost:8080/ >/dev/null || echo "OAuth port not answering HEAD"

            docker ps
            docker logs --tail=200 decap-prod-cms-1 || true

      - name: Health check (public)
        run: curl -fsSI --max-time 30 "http://${{ secrets.VM_HOST }}/" >/dev/null
