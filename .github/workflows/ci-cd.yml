name: Secure DevSecOps Pipeline for Decap CMS (Yandex Cloud)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # SAST (Gitleaks + Semgrep + npm audit)
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml  # Опционально, если есть кастомная конфигурация
        env:
          GITLEAKS_COMMAND: "detect --redact --verbose --exit-code=2 --report-format=sarif --report-path=./gitleaks-results.sarif --log-level=debug"
        continue-on-error: true
      - name: Extract Gitleaks SARIF from zip
        run: |
          if [ -f gitleaks-results.sarif.zip ]; then
            unzip -o gitleaks-results.sarif.zip -d .
            if [ -f gitleaks-results.sarif ]; then
              mv gitleaks-results.sarif ./gitleaks-results.sarif
            else
              echo "No SARIF file in zip, creating empty SARIF"
              echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"gitleaks","informationUri":"https://github.com/gitleaks/gitleaks"}},"results":[]}]}' > ./gitleaks-results.sarif
            fi
          else
            echo "No Gitleaks zip found, creating empty SARIF"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"gitleaks","informationUri":"https://github.com/gitleaks/gitleaks"}},"results":[]}]}' > ./gitleaks-results.sarif
          fi
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v2  # Обновили до v2, где поддерживается output
        with:
          config: auto
          output: semgrep.sarif  # Заменили generateSarif на output
        continue-on-error: true
      - name: Debug Semgrep output
        run: |
          ls -la .
          if [ -f semgrep.sarif ]; then
            echo "Semgrep SARIF generated successfully"
          else
            echo "Semgrep SARIF not found, check logs above"
          fi
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install || echo "No package.json or lock file, skipping install"
        continue-on-error: true
      - name: Run npm audit
        run: npm audit --audit-level=high --json > sast-npm-audit.json 2>/dev/null || echo "npm audit failed or not applicable, creating empty report"
        continue-on-error: true
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            ./gitleaks-results.sarif
            ./semgrep.sarif
        if: always()
      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            ./gitleaks-results.sarif
            ./semgrep.sarif
            ./sast-npm-audit.json
        if: always()

  # Build & Push
  build:
    runs-on: ubuntu-latest
    needs: sast
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Install YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          install -m 0755 "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc
      - name: Configure YC
        env:
          YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "$YC_SA_KEY_JSON" > sa-key.json
          yc config set service-account-key sa-key.json
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"
      - name: Docker login
        run: |
          TOKEN=$(yc iam create-token)
          echo "$TOKEN" | docker login -u iam --password-stdin cr.yandex
      - name: Build & Push
        id: build
        run: |
          IMAGE="${{ secrets.YC_REGISTRY_REPO }}"
          TAG="${{ github.sha }}"
          docker build \
            --build-arg DECAP_CMS_VER=3.0.9 \
            --build-arg NETLIFY_CMS_AUTH_HASH=${{ secrets.NETLIFY_CMS_AUTH_HASH }} \
            --build-arg OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }} \
            --build-arg OAUTH_CLIENT_SECRET=${{ secrets.OAUTH_CLIENT_SECRET }} \
            --build-arg ORIGINS=${{ secrets.ORIGINS }} \
            -t "$IMAGE:$TAG" -t "$IMAGE:latest" .
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Staging VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            mkdir -p ~/decap-staging
            export IMAGE="${{ secrets.YC_REGISTRY_REPO }}:${{ needs.build.outputs.image_tag }}"
            cat > ~/decap-staging/docker-compose.yml <<'YAML'
            services:
              cms:
                image: ${IMAGE}
                ports:
                  - "8080:80"
                restart: unless-stopped
                volumes:
                  - ./config.yml:/app/config.yml:ro
            YAML
            docker compose -f ~/decap-staging/docker-compose.yml pull
            docker compose -f ~/decap-staging/docker-compose.yml up -d
            docker ps
      - name: Health check
        run: |
          curl -I --max-time 30 "http://${{ secrets.STAGING_VM_HOST }}:8080/" || exit 1

  # DAST (ZAP)
  dast:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: http://${{ secrets.STAGING_VM_HOST }}:8080/
          cmd_options: '-a -m 10 -f json -o dast-report.json -r dast-report.html'
        continue-on-error: true
      - name: Upload DAST reports
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            dast-report.json
            dast-report.html
        if: always()

  # Image Scan (Trivy)
  image-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.55.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.55.0_Linux-64bit.deb
      - name: Trivy image scan
        run: |
          trivy image --format sarif --output trivy-image.sarif \
            --severity HIGH,CRITICAL \
            ${{ secrets.YC_REGISTRY_REPO }}:${{ needs.build.outputs.image_tag }}
        continue-on-error: true
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
        if: always()
      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: image-scan-reports
          path: trivy-image.sarif
        if: always()

  # Security Gateway
  security-gateway:
    runs-on: ubuntu-latest
    needs: [sast, dast, image-scan]
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
      - name: Check for critical vulnerabilities
        run: |
          if jq '.runs[0].results | length > 0' sast-reports/gitleaks-results.sarif; then exit 1; fi
          if [ -f sast-reports/semgrep.sarif ]; then
            if jq '.runs[0].results[] | select(.level == "error")' sast-reports/semgrep.sarif | grep -q .; then exit 1; fi
          fi
          if [ -f sast-reports/sast-npm-audit.json ]; then
            if jq '.metadata.vulnerabilities.high > 0 or .metadata.vulnerabilities.critical > 0' sast-reports/sast-npm-audit.json; then exit 1; fi
          fi
          if [ -f dast-reports/dast-report.json ]; then
            if jq '.site[].alerts[] | select(.riskcode > 2)' dast-reports/dast-report.json | grep -q .; then exit 1; fi
          fi
          if [ -f image-scan-reports/trivy-image.sarif ]; then
            if jq '.runs[0].results[] | select(.level == "error")' image-scan-reports/trivy-image.sarif | grep -q .; then exit 1; fi
          fi
      - name: Comment on PR if failed
        if: failure() && github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            Security checks failed! Found critical/high vulnerabilities or secrets.  
            - Check reports in artifacts.  
            - Recommendations: Update dependencies, fix code issues, remove secrets.

  # Deploy to Prod
  deploy-prod:
    runs-on: ubuntu-latest
    needs: security-gateway
    if: needs.security-gateway.result == 'success'
    steps:
      - name: Deploy to Prod VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            mkdir -p ~/decap-prod
            export IMAGE="${{ secrets.YC_REGISTRY_REPO }}:${{ needs.build.outputs.image_tag }}"
            cat > ~/decap-prod/docker-compose.yml <<'YAML'
            services:
              cms:
                image: ${IMAGE}
                ports:
                  - "80:80"
                restart: unless-stopped
                volumes:
                  - ./config.yml:/app/config.yml:ro
            YAML
            docker compose -f ~/decap-prod/docker-compose.yml pull
            docker compose -f ~/decap-prod/docker-compose.yml up -d
            docker ps
      - name: Health check
        run: |
          curl -I --max-time 30 "http://${{ secrets.VM_HOST }}/" || exit 1